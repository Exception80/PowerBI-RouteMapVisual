{
  "name": "arc",
  "version": "0.1.0",
  "description": "draw great circle arcs",
  "url": "https://github.com/springmeyer/arc.js",
  "keywords": [
    "maps",
    "spherical",
    "globe",
    "rhumb line",
    "crow flies",
    "great circle"
  ],
  "contributors": [
    {
      "name": "Dane Springmeyer",
      "email": "dane@dbsgeo.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/springmeyer/arc.js.git"
  },
  "licenses": [
    {
      "type": "BSD"
    }
  ],
  "main": "./index",
  "engines": {
    "node": ">=0.4.0"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "devDependencies": {
    "tape": "~2.12.1"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest"
    ]
  },
  "gitHead": "b005df058b010d1c7aaf3aa451516d41294dac0e",
  "readme": "# arc.js\r\n> Calculate great circles routes as lines in GeoJSON or WKT format.\r\n\r\nAlgorithms from http://williams.best.vwh.net/avform.htm#Intermediate\r\n\r\nIncludes basic support for splitting lines that cross the dateline, based on\r\na partial port of code from OGR.\r\n\r\n## Install\r\n\r\n```bash\r\n$ npm install --save arc\r\n```\r\n\r\n```bash\r\n$ bower install --save arc.js\r\n```\r\n\r\n## License\r\n\r\nBSD\r\n\r\n## Usage\r\n\r\nRequire the library in node.js like:\r\n```js\r\nvar arc = require('arc');\r\n```\r\n\r\nUse in the browser like:\r\n```html\r\n<script src=\"./arc.js\"></script>\r\n```\r\n\r\n## API\r\n\r\n**1)** Create start and end coordinates\r\n\r\nFirst we need to declare where the arc should start and end\r\n\r\n```js\r\nvar start = { x: -122, y: 48 };\r\nvar end = { x: -77, y: 39 };\r\n```\r\n\r\nNote that `x` here is longitude in degrees and `y` is latitude in degrees.\r\n\r\n**2)** Create GreatCircle object\r\n\r\nNext we pass the start/end to the `GreatCircle` constructor, along with an optional object representing the properties for this future line.\r\n\r\n```js\r\nvar generator = new arc.GreatCircle(start, end, {'name': 'Seattle to DC'});\r\n```\r\n\r\n**3)** Generate a line arc\r\n\r\nThen call the `Arc` function on the `GreatCircle` object to generate a line:\r\n\r\n```js\r\nvar line = generator.Arc(100,{offset:10});\r\n```\r\n\r\nThe `line` will be a raw sequence of the start and end coordinates plus an arc of\r\nintermediate coordinate pairs.\r\n\r\n```js\r\n> line\r\n{ properties: { name: 'Seattle to DC' },\r\n  coords: \r\n   [ [ -122, 48.00000000000001 ],\r\n     [ -112.06161978373486, 47.7241672604096 ],\r\n     [ -102.38404317022653, 46.60813199882492 ],\r\n     [ -93.22718895342909, 44.716217302635705 ],\r\n     [ -84.74823988299501, 42.14415510795357 ],\r\n     [ -77, 38.99999999999999 ] ],\r\n  length: 6 }\r\n```\r\n\r\n#### Arc options\r\n\r\nThe first argument to `Arc` specifies the number of intermediate vertices you want in the resulting line. The higher the number the more dense and accurate the line will be.\r\n\r\nThe second argument is an optional object to declare options. The `offset` option controls the likelyhood that lines will be split which cross the dateline. The higher the number the more likely. The default value is 10, which means lines within 10 degress of the dateline will be split. For lines that cross and dateline and are also near the poles you will likely need a higher value to trigger splitting. It is unclear to me (@springmeyer) what the drawbacks are of high offsets. I simply ported the code from OGR's `gdal/ogr/ogrgeometryfactory.cpp` and have not taken the time to fully comprehend how it works.\r\n\r\n**4)** Convert line to GeoJSON geometry\r\n\r\nTo serialize to a GeoJSON geometry:\r\n\r\n```js\r\n> line.json();\r\n{ geometry: \r\n   { type: 'LineString',\r\n     coordinates: [ [Object], [Object], [Object], [Object], [Object], [Object] ] },\r\n  type: 'Feature',\r\n  properties: { name: 'Seattle to DC' } }\r\n```\r\n\r\nOr to WKT (Well known text):\r\n\r\n```js\r\n> line.wkt();\r\n'LINESTRING(-122 48.00000000000001,-112.06161978373486 47.7241672604096,-102.38404317022653 46.60813199882492,-93.22718895342909 44.716217302635705,-84.74823988299501 42.14415510795357,-77 38.99999999999999)'\r\n```\r\n\r\nIt is then up to you to add up these features to create fully fledged geodata. See the examples/ directory for sample code to create GeoJSON feature collection from multiple routes.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/springmeyer/arc.js/issues"
  },
  "homepage": "https://github.com/springmeyer/arc.js#readme",
  "_id": "arc@0.1.0",
  "_shasum": "28b97026b079a6de0dd80dc834594b0422e4bfaa",
  "_from": "git+https://github.com/springmeyer/arc.js.git#b005df058b010d1c7aaf3aa451516d41294dac0e",
  "_resolved": "git+https://github.com/springmeyer/arc.js.git#b005df058b010d1c7aaf3aa451516d41294dac0e"
}
